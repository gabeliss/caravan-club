from app.caravan_automation.scrapers.scrapeTimberRidgeTent import scrape_timberRidgeTent
from app.caravan_automation.scrapers.scrapeLeelanauPinesTent import scrape_leelanauPinesTent
from app.caravan_automation.scrapers.scrapeIndianRiverTent import scrape_indianRiverTent
from app.caravan_automation.scrapers.scrapeUncleDuckysTent import scrape_uncleDuckysTent
from app.caravan_automation.scrapers.scrapeTouristParkTent import scrape_touristParkTent
from app.caravan_automation.scrapers.scrapeFortSuperiorTent import scrape_fortSuperiorTent
import os, base64
import jwt as pyjwt
import logging
import requests
import pytz
import json
from datetime import datetime, timedelta
from flask import request, jsonify, render_template
from functools import wraps
from app import app, db
from app.models import User, Trip, Segment
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail, Attachment, FileContent, FileName, FileType, Disposition
import random
import string

SECRET_KEY = os.getenv("SECRET_KEY", "your_secret_key")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "secure_password")

# Load the JSON data when the module starts
with open(os.path.join(os.path.dirname(__file__), '..', '..', 'frontend', 'src', 'northernmichigandata.json')) as f:
    northern_michigan_data = json.load(f)

def get_accommodation_title(accommodation_id):
    """Helper function to get accommodation title and address from the JSON data"""
    # Convert "Tee Pee Campground" -> "teePeeCampground"
    key = accommodation_id.replace(' ', '')  # Remove spaces
    key = key[0].lower() + key[1:]  # Make first letter lowercase
    
    # Map accommodation IDs to their locations in the JSON
    accommodation_map = {
        "timberRidge": ("traverseCity", "timberRidge"),
        "leelanauPines": ("traverseCity", "leelanauPines"),
        "indianRiver": ("mackinacCity", "indianRiver"),
        "teePeeCampground": ("mackinacCity", "teePeeCampground"),
        "uncleDucky": ("picturedRocks", "uncleDucky"),
        "touristPark": ("picturedRocks", "touristPark"),
        "fortSuperior": ("picturedRocks", "fortSuperior")
    }
    
    try:
        if key in accommodation_map:
            region, site = accommodation_map[key]
            return {
                "title": northern_michigan_data[region]["tent"][site]["title"],
                "address": northern_michigan_data[region]["tent"][site]["address"]
            }
    except KeyError:
        pass
    
    return {"title": accommodation_id, "address": ""}  # Return original ID if not found

@app.route('/api/hello')
def index():
    return 'Hello, World - modified! Psyche, modified again!'

@app.route('/api/caravan-admin/login', methods=['POST'])
def admin_login():
    data = request.json
    print("data", data)
    print("ADMIN_PASSWORD", ADMIN_PASSWORD)
    if data.get("password") == ADMIN_PASSWORD:
        token = pyjwt.encode({
            "admin": True,
            "exp": datetime.utcnow() + timedelta(hours=1)
        }, SECRET_KEY, algorithm="HS256")
        return jsonify({"token": token}), 200
    return jsonify({"error": "Invalid password"}), 401


def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        token = request.headers.get("Authorization")
        if not token:
            return jsonify({"error": "Authorization required"}), 403
        try:
            decoded = pyjwt.decode(token.split(" ")[1], SECRET_KEY, algorithms=["HS256"])
            if not decoded.get("admin"):
                raise pyjwt.InvalidTokenError
        except pyjwt.ExpiredSignatureError:
            return jsonify({"error": "Token expired"}), 401
        except pyjwt.InvalidTokenError:
            return jsonify({"error": "Invalid token"}), 401
        return f(*args, **kwargs)
    return decorated_function


@app.route('/api/trip/<int:trip_id>', methods=['GET'])
@admin_required
def get_trip_details(trip_id):
    trip = Trip.query.get(trip_id)
    if not trip:
        return {"error": "Trip not found"}, 404

    user = trip.user

    return {
        "user": {
            "user_id": user.user_id,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "email": user.email,
            "phone_number": user.phone_number,
            "street_address": user.street_address,
            "city": user.city,
            "state": user.state,
            "zip_code": user.zip_code,
            "country": user.country,
            "cardholder_name": user.cardholder_name,
            "card_number": user.card_number,
            "card_type": user.card_type,
            "expiry_date": user.expiry_date,
            "cvc": user.cvc
        },
        "trip": {
            "trip_id": trip.trip_id,
            "confirmation_number": trip.confirmation_number,
            "user_id": trip.user_id,
            "destination": trip.destination,
            "start_date": trip.start_date.strftime('%m/%d/%y'),
            "end_date": trip.end_date.strftime('%m/%d/%y'),
            "date_booked": trip.date_booked.strftime('%m/%d/%y %H:%M:%S'),
            "nights": trip.nights,
            "num_adults": trip.num_adults,
            "num_kids": trip.num_kids,
            "caravan_fee": trip.caravan_fee,
            "grand_total": trip.grand_total,
            "trip_fully_processed": trip.trip_fully_processed,
            "segments": [
                {
                    "segment_id": segment.segment_id,
                    "trip_id": segment.trip_id,
                    "name": segment.name,
                    "selected_accommodation": segment.selected_accommodation,
                    "start_date": segment.start_date.strftime('%m/%d/%y'),
                    "end_date": segment.end_date.strftime('%m/%d/%y'),
                    "nights": segment.nights,
                    "base_price": segment.base_price,
                    "tax": segment.tax,
                    "total": segment.total,
                    "payment_successful": segment.payment_successful
                }
                for segment in trip.segments
            ]
        }
    }, 200


def generate_confirmation_number():
    """Generate a unique confirmation number starting with 'C' followed by 8 digits"""
    while True:
        # Generate 8 random digits
        digits = ''.join(random.choices(string.digits, k=8))
        confirmation_number = f"C{digits}"
        
        # Check if this confirmation number already exists
        if not Trip.query.filter_by(confirmation_number=confirmation_number).first():
            return confirmation_number

@app.route('/api/trip', methods=['POST'])
def create_trip():
    data = request.json

    # Validate user data
    user_data = data.get("user")
    if not user_data:
        return {"error": "User data is required"}, 400

    # Find the user by email
    user = User.query.filter_by(email=user_data["email"]).first()
    if user:
        # Update the user's current info (optional)
        user.phone_number = user_data.get("phone_number", user.phone_number)
        user.street_address = user_data.get("street_address", user.street_address)
        user.city = user_data.get("city", user.city)
        user.state = user_data.get("state", user.state)
        user.zip_code = user_data.get("zip_code", user.zip_code)
        user.country = user_data.get("country", user.country)
        user.cardholder_name = user_data.get("cardholder_name", user.cardholder_name)
        user.card_number = user_data.get("card_number", user.card_number)
        user.card_type = user_data.get("card_type", user.card_type)
        user.expiry_date = user_data.get("expiry_date", user.expiry_date)
        user.cvc = user_data.get("cvc", user.cvc)
    else:
        # Create a new user if none exists
        user = User(
            first_name=user_data["first_name"],
            last_name=user_data["last_name"],
            email=user_data["email"],
            phone_number=user_data.get("phone_number"),
            street_address=user_data.get("street_address"),
            city=user_data.get("city"),
            state=user_data.get("state"),
            zip_code=user_data.get("zip_code"),
            country=user_data.get("country"),
            cardholder_name=user_data.get("cardholder_name"),
            card_number=user_data.get("card_number"),
            card_type=user_data.get("card_type"),
            expiry_date=user_data.get("expiry_date"),
            cvc=user_data.get("cvc"),
        )
        db.session.add(user)

    # Validate trip data
    trip_data = data.get("trip")
    if not trip_data:
        return {"error": "Trip data is required"}, 400

    # Generate unique confirmation number
    confirmation_number = generate_confirmation_number()

    # Create the trip, copying user info into the trip
    trip = Trip(
        confirmation_number=confirmation_number,
        user=user,
        destination=trip_data["destination"],
        start_date=trip_data["start_date"],
        end_date=trip_data["end_date"],
        nights=trip_data["nights"],
        num_adults=trip_data["num_adults"],
        num_kids=trip_data["num_kids"],
        caravan_fee=trip_data["caravan_fee"],
        grand_total=trip_data["grand_total"],
        trip_fully_processed=trip_data["trip_fully_processed"],
        date_booked=datetime.now(pytz.timezone('US/Eastern')).strftime('%Y-%m-%d %I:%M %p EST'),
        # Historical user information
        email=user.email,
        booking_address=f"{user.street_address}, {user.city}, {user.state}, {user.zip_code}, {user.country}",
        cardholder_name=user.cardholder_name,
        card_number=user.card_number,
        card_type=user.card_type,
        expiry_date=user.expiry_date,
        cvc=user.cvc
    )

    # Add segments to the trip
    segments_data = trip_data.get("segments", [])
    for segment_data in segments_data:
        segment = Segment(
            trip=trip,
            name=segment_data["name"],
            selected_accommodation=segment_data["selected_accommodation"],
            start_date=segment_data["start_date"],
            end_date=segment_data["end_date"],
            nights=segment_data["nights"],
            base_price=segment_data["base_price"],
            tax=segment_data["tax"],
            total=segment_data["total"],
            payment_successful=segment_data["payment_successful"]
        )
        db.session.add(segment)

    # Commit the transaction
    db.session.commit()

    # Send confirmation email
    send_trip_confirmation_email(user_data["email"], trip)

    return {"message": "Trip created successfully", "trip_id": trip.trip_id}, 201


def send_trip_confirmation_email(email, trip):
    """
    Sends a confirmation email after the trip is created using SendGrid.
    """
    try:
        # Add this at the start of the function to suppress SendGrid debug logs
        logging.getLogger("python_http_client").setLevel(logging.WARNING)
        
        # Calculate night numbers for each segment
        current_night = 1
        segments_data = []
        for segment in trip.segments:
            accommodation_info = get_accommodation_title(segment.selected_accommodation)
            segment_data = {
                "name": segment.name,
                "selected_accommodation": accommodation_info["title"],
                "address": accommodation_info["address"],
                "start_date": segment.start_date.strftime('%b %-d'),
                "end_date": segment.end_date.strftime('%b %-d'),
                "total": f"{segment.total:.2f}",
                "nights": segment.nights,
                "night_start": current_night,
                "night_end": current_night + segment.nights - 1
            }
            segments_data.append(segment_data)
            current_night += segment.nights

        # Render the HTML template
        html_content = render_template(
            "email_trip_confirmation.html",
            first_name=trip.user.first_name,
            confirmation_number=trip.confirmation_number,
            start_date=trip.start_date.strftime('%B %d, %Y'),
            end_date=trip.end_date.strftime('%B %d, %Y'),
            num_adults=trip.num_adults,
            num_kids=trip.num_kids,
            grand_total=f"{trip.grand_total:.2f}",
            segments=segments_data,
            trip=trip  # Add trip to the template context
        )

        # Create the email message
        message = Mail(
            from_email='caravantripplan@gmail.com',
            to_emails=email,
            subject='Your Caravan Trip Plan is Confirmed!',
            html_content=html_content
        )

        # Path to the PDF file based on the number of nights
        pdf_path = f"./itineraries/{trip.nights}-day-northern-michigan.pdf"

        # Attach the PDF
        try:
            with open(pdf_path, 'rb') as f:
                pdf_data = f.read()
                encoded_pdf = base64.b64encode(pdf_data).decode()
                attachment = Attachment(
                    FileContent(encoded_pdf),
                    FileName(f"{trip.nights}-day-northern-michigan.pdf"),
                    FileType('application/pdf'),
                    Disposition('attachment')
                )
                message.add_attachment(attachment)
        except FileNotFoundError:
            logging.error(f"PDF file not found: {pdf_path}")

        # Send the email
        sg = SendGridAPIClient(os.getenv('SENDGRID_API_KEY'))
        response = sg.send(message)
        logging.info(f"Email sent to {email}. Status code: {response.status_code}, Body: {response.body}, Headers: {response.headers}")
    except Exception as e:
        logging.error(f"Failed to send email to {email}: {str(e)}")


@app.route('/api/trips', methods=['GET'])
@admin_required
def get_all_trips():
    trips = Trip.query.all()
    return {
        "trips": [
            {
                "trip_id": trip.trip_id,
                "confirmation_number": trip.confirmation_number,
                "user": {
                    "first_name": trip.user.first_name,
                    "last_name": trip.user.last_name,
                    "email": trip.user.email
                },
                "destination": trip.destination,
                "start_date": trip.start_date.strftime('%m/%d/%y'),
                "end_date": trip.end_date.strftime('%m/%d/%y'),
                "date_booked": trip.date_booked.strftime('%m/%d/%y %H:%M:%S'),
                "grand_total": trip.grand_total,
                "trip_fully_processed": trip.trip_fully_processed
            }
            for trip in trips
        ]
    }, 200


@app.route('/api/trips/search', methods=['GET'])
@admin_required
def search_trips_by_email():
    email = request.args.get("email")
    if not email:
        return {"error": "Email is required"}, 400

    user = User.query.filter_by(email=email).first()
    if not user:
        return {"error": "User not found"}, 404

    trips = Trip.query.filter_by(user_id=user.user_id).all()
    return {
        "trips": [
            {
                "trip_id": trip.trip_id,
                "confirmation_number": trip.confirmation_number,
                "user": {
                    "first_name": trip.user.first_name,
                    "last_name": trip.user.last_name,
                    "email": trip.user.email
                },
                "destination": trip.destination,
                "start_date": trip.start_date.strftime('%m/%d/%y'),
                "end_date": trip.end_date.strftime('%m/%d/%y'),
                "date_booked": trip.date_booked.strftime('%m/%d/%y %H:%M:%S'),
                "grand_total": trip.grand_total,
                "trip_fully_processed": trip.trip_fully_processed
            }
            for trip in trips
        ]
    }, 200


@app.route('/api/trip/<int:trip_id>', methods=['DELETE'])
def delete_trip(trip_id):
    # Fetch the trip by ID
    trip = Trip.query.get(trip_id)
    if not trip:
        return {"error": "Trip not found"}, 404

    # Delete the trip and its associated segments
    db.session.delete(trip)
    db.session.commit()

    return {"message": f"Trip with ID {trip_id} has been successfully deleted."}, 200



@app.route('/api/images')
def serve_images():
    image_paths = get_image_paths()
    images = [read_image(path) for path in image_paths]
    return images

def get_image_paths():
    gallery_path = 'app/static/images/landing-gallery' 
    image_paths = []

    try:
        for filename in os.listdir(gallery_path):
            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
                image_paths.append(os.path.join(gallery_path, filename))
    except FileNotFoundError:
        print(f"Directory not found: {gallery_path}")

    return image_paths

def read_image(path):
    with open(path, 'rb') as image_file:
        encoded_image = base64.b64encode(image_file.read())
        encoded_image_str = encoded_image.decode('utf-8')
        return encoded_image_str
    

def get_price(place_name, min_travelers, max_travelers, scrape_function):
    try:
        num_adults = request.args.get('num_adults', default=1, type=int)
        num_kids = request.args.get('num_kids', default=0, type=int)
        num_travelers = num_adults + num_kids
        if num_adults < min_travelers:
            return {"available": False, "price": None, "message": f"Not available for less than {min_travelers} travelers"}
        
        if num_travelers > max_travelers:
            return {"available": False, "price": None, "message": f"Not available for more than {max_travelers} travelers"}

        start_date = request.args.get('start_date', default='', type=str)
        end_date = request.args.get('end_date', default='', type=str)
        data = scrape_function(start_date, end_date, num_adults, num_kids)
        return data
    except Exception as e:
        logging.error(f"Error in {place_name}: %s", str(e), exc_info=True)
        return {"error": "Internal server error"}, 500


#### SCRAPES - Northern Michigan - Tent ####

@app.route('/api/scrape/timberRidgeTent')
def get_timberRidgeTent_price():
    return get_price('Timber Ridge', 1, 6, scrape_timberRidgeTent)

@app.route('/api/scrape/leelanauPinesTent')
def get_leelanauPinesTent_price():
    return get_price('Leelanau Pines', 1, 8, scrape_leelanauPinesTent)

@app.route('/api/scrape/indianRiverTent')
def get_indianRiverTent_price():
    return get_price('Indian River', 1, 8, scrape_indianRiverTent)

@app.route('/api/scrape/uncleDuckysTent')
def get_uncleDuckysTent_price():
    return get_price('Uncle Duckys', 1, 5, scrape_uncleDuckysTent)

@app.route('/api/scrape/touristParkTent')
def get_touristParkTent_price():
    return get_price('Tourist Park', 1, 6, scrape_touristParkTent)

@app.route('/api/scrape/fortSuperiorTent')
def get_fortSuperiorTent_price():
    return get_price('Fort Superior', 1, 6, scrape_fortSuperiorTent)

#### AWS Lambda SCRAPES - Northern Michigan - Teepee ####
@app.route('/api/scrape/teePeeCampgroundTent')
def get_teePeeCampgroundTent_price():
    try:
        # Extract parameters from request
        num_adults = request.args.get('num_adults', default=1, type=int)
        num_kids = request.args.get('num_kids', default=0, type=int)
        start_date = request.args.get('start_date', default='', type=str)
        end_date = request.args.get('end_date', default='', type=str)

        # Lambda API endpoint for scraping
        lambda_endpoint = "https://3z1i6f4h50.execute-api.us-east-2.amazonaws.com/dev/scrape/teePeeCampgroundTent"

        # Payload for Lambda function
        payload = {
            "startDate": start_date,
            "endDate": end_date,
            "numAdults": num_adults,
            "numKids": num_kids
        }

        # Call the Lambda function
        response = requests.post(lambda_endpoint, json=payload)

        # Return the Lambda response directly
        if response.status_code == 200:
            return jsonify(response.json()), 200
        else:
            return jsonify({"error": "Failed to get price from Tee Pee Campground"}), response.status_code

    except Exception as e:
        logging.error(f"Error in get_teePeeCampgroundTent_price: {e}")
        return {"error": "Internal server error"}, 500
    

def process_payment_lambda(place_name, lambda_path):
    """
    Generic function to process payments through AWS Lambda
    """
    try:
        payload = request.json

        # Use camelCase keys to extract values
        num_adults = payload.get('numAdults', 1)
        num_kids = payload.get('numKids', 0)
        start_date = payload.get('startDate', '')
        end_date = payload.get('endDate', '')
        payment_info = payload.get('paymentInfo', {})
        execute_payment = payload.get('executePayment', False)

        # Lambda API endpoint
        lambda_endpoint = f"https://3z1i6f4h50.execute-api.us-east-2.amazonaws.com/dev/pay/{lambda_path}"

        # Payload for Lambda function
        lambda_payload = {
            "startDate": start_date,
            "endDate": end_date,
            "numAdults": num_adults,
            "numKids": num_kids,
            "paymentInfo": payment_info,
            "executePayment": execute_payment
        }

        # Comment out actual request and return fake successful response
        # response = requests.post(lambda_endpoint, json=lambda_payload)
        # return jsonify(response.json()), response.status_code
        
        fake_response = {
            "base_price": 150.00,
            "tax": 12.00,
            "total": 162.00,
            "payment_successful": True
        }
        return jsonify(fake_response), 200

    except Exception as e:
        logging.error(f"Error in process_payment for {place_name}: {e}")
        return {"error": "Internal server error"}, 500
    
@app.route('/api/pay/uncleDuckysTent', methods=['POST'])
def pay_uncleDuckysTent():
    return process_payment_lambda("Uncle Duckys", "uncleDuckysTent")

@app.route('/api/pay/leelanauPinesTent', methods=['POST'])
def pay_leelanauPinesTent():
    return process_payment_lambda("Leelanau Pines", "leelanauPinesTent")

@app.route('/api/pay/indianRiverTent', methods=['POST'])
def pay_indianRiverTent():
    return process_payment_lambda("Indian River", "indianRiverTent")

@app.route('/api/pay/touristParkTent', methods=['POST'])
def pay_touristParkTent():
    return process_payment_lambda("Tourist Park", "touristParkTent")

@app.route('/api/pay/fortSuperiorTent', methods=['POST'])
def pay_fortSuperiorTent():
    return process_payment_lambda("Fort Superior", "fortSuperiorTent")

@app.route('/api/pay/timberRidgeTent', methods=['POST'])
def pay_timberRidgeTent():
    return process_payment_lambda("Timber Ridge", "timberRidgeTent")

@app.route('/api/pay/teePeeCampgroundTent', methods=['POST'])
def pay_teePeeCampgroundTent():
    return process_payment_lambda("Tee Pee Campground", "teePeeCampgroundTent")


@app.route('/api/run-payment-tests', methods=['POST'])
async def run_payment_tests():
    try:
        # Import the test module
        test_module = __import__('app.caravan_automation.tests.test_payment_routes', fromlist=['runDailyTests'])
        # Run the tests
        results = await test_module.runDailyTests()
        return jsonify({"message": "Payment tests completed successfully", "results": results}), 200
    except Exception as e:
        return jsonify({"error": f"Failed to run payment tests: {str(e)}"}), 500

# Add new route to get trip by confirmation number
@app.route('/api/trip/confirmation/<confirmation_number>', methods=['GET'])
@admin_required
def get_trip_by_confirmation(confirmation_number):
    trip = Trip.query.filter_by(confirmation_number=confirmation_number).first()
    if not trip:
        return {"error": "Trip not found"}, 404

    user = trip.user
    return {
        "user": {
            "user_id": user.user_id,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "email": user.email,
            "phone_number": user.phone_number,
            "street_address": user.street_address,
            "city": user.city,
            "state": user.state,
            "zip_code": user.zip_code,
            "country": user.country,
            "cardholder_name": user.cardholder_name,
            "card_number": user.card_number,
            "card_type": user.card_type,
            "expiry_date": user.expiry_date,
            "cvc": user.cvc
        },
        "trip": {
            "trip_id": trip.trip_id,
            "confirmation_number": trip.confirmation_number,
            "user_id": trip.user_id,
            "destination": trip.destination,
            "start_date": trip.start_date.strftime('%m/%d/%y'),
            "end_date": trip.end_date.strftime('%m/%d/%y'),
            "date_booked": trip.date_booked.strftime('%m/%d/%y %H:%M:%S'),
            "nights": trip.nights,
            "num_adults": trip.num_adults,
            "num_kids": trip.num_kids,
            "caravan_fee": trip.caravan_fee,
            "grand_total": trip.grand_total,
            "trip_fully_processed": trip.trip_fully_processed,
            "segments": [
                {
                    "segment_id": segment.segment_id,
                    "trip_id": segment.trip_id,
                    "name": segment.name,
                    "selected_accommodation": segment.selected_accommodation,
                    "start_date": segment.start_date.strftime('%m/%d/%y'),
                    "end_date": segment.end_date.strftime('%m/%d/%y'),
                    "nights": segment.nights,
                    "base_price": segment.base_price,
                    "tax": segment.tax,
                    "total": segment.total,
                    "payment_successful": segment.payment_successful
                }
                for segment in trip.segments
            ]
        }
    }, 200


@app.route("/api/preview-email-confirmation")
def preview_email_confirmation():
    # Create sample data that matches the structure expected by the template
    preview_date = datetime.now()
    data = {
        "first_name": "John",
        "confirmation_number": "C12345678",
        "start_date": (preview_date).strftime('%B %d, %Y'),
        "end_date": (preview_date + timedelta(days=5)).strftime('%B %d, %Y'),
        "num_adults": 2,
        "num_kids": 1,
        "trip": {
            "nights": 5  # Added this for the attachment info
        },
        "segments": [
            {
                "name": "Timber Ridge",
                "selected_accommodation": "Timber Ridge Recreation",
                "address": "4050 E Hammond Rd, Traverse City, MI 49686",
                "start_date": "Jun 15",
                "end_date": "Jun 17",
                "total": "199.99",
                "nights": 2,
                "night_start": 1,
                "night_end": 2
            },
            {
                "name": "Leelanau Pines",
                "selected_accommodation": "Leelanau Pines Campground",
                "address": "6500 E. Leelanau Pines Drive, Cedar, MI 49621",
                "start_date": "Jun 17",
                "end_date": "Jun 19",
                "total": "249.99",
                "nights": 2,
                "night_start": 3,
                "night_end": 4
            },
            {
                "name": "Fort Superior",
                "selected_accommodation": "Fort Superior Campground",
                "address": "N7685 Old Golf Course Rd. Munising, MI 49862",
                "start_date": "Jun 19",
                "end_date": "Jun 20",
                "total": "179.99",
                "nights": 1,
                "night_start": 5,
                "night_end": 5
            }
        ],
        "grand_total": "629.97"
    }
    return render_template("email_trip_confirmation.html", **data)